// src/pages/KanbanPage.tsx
import { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import type { Task } from "../types";
import {
  DragDropContext,
  Droppable,
  Draggable,
  type DropResult,
} from "@hello-pangea/dnd";
import { Button, Card, Form, Modal, Badge } from "react-bootstrap";

const columns = {
  todo: "To Do",
  in_progress: "In Progress",
  on_hold: "On Hold",
  done: "Completed",
};

interface Profile {
  id: string;
  full_name: string;
}

export default function KanbanPage() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [users, setUsers] = useState<Profile[]>([]);
  const [showModal, setShowModal] = useState(false);
  const [newTask, setNewTask] = useState({
    title: "",
    description: "",
    status: "todo" as Task["status"],
    assignee: "",
    due_date: "",
    priority: "medium" as Task["priority"],
    created_by: "",
  });

  // Fetch tasks
  useEffect(() => {
    const fetchTasks = async () => {
      const { data, error } = await supabase
        .from("tasks")
        .select("*")
        .order("order_index", { ascending: true });
      if (error) console.error(error);
      else setTasks(data || []);
    };
    fetchTasks();
  }, []);

  // Fetch users for dropdown
  useEffect(() => {
    const fetchUsers = async () => {
      const { data, error } = await supabase
        .from("profiles")
        .select("id, full_name");
      if (error) console.error(error);
      else setUsers(data || []);
    };
    fetchUsers();
  }, []);

  // Drag and drop handler
  const handleDragEnd = async (result: DropResult) => {
    const { source, destination } = result;
    if (!destination) return;
    if (
      source.droppableId === destination.droppableId &&
      source.index === destination.index
    ) {
      return;
    }

    const updatedTasks = Array.from(tasks);
    const [movedTask] = updatedTasks.splice(source.index, 1);
    movedTask.status = destination.droppableId as Task["status"];
    updatedTasks.splice(destination.index, 0, movedTask);

    const reordered = updatedTasks.map((task, index) => ({
      ...task,
      order_index: index,
    }));

    setTasks(reordered);

    await Promise.all(
      reordered.map((task) =>
        supabase
          .from("tasks")
          .update({ status: task.status, order_index: task.order_index })
          .eq("id", task.id)
      )
    );
  };

  // Create new task
  const handleCreateTask = async () => {
    if (!newTask.title.trim()) return;

    const { data: user } = await supabase.auth.getUser(); // current user
    const creatorId = user?.user?.id || "anonymous";

    const { data, error } = await supabase
      .from("tasks")
      .insert([
        {
          ...newTask,
          created_by: creatorId,
          order_index: tasks.filter((t) => t.status === newTask.status).length,
        },
      ])
      .select()
      .single();

    if (error) console.error(error);
    else setTasks((prev) => [...prev, data]);

    setShowModal(false);
    setNewTask({
      title: "",
      description: "",
      status: "todo",
      assignee: "",
      due_date: "",
      priority: "medium",
      created_by: "",
    });
  };

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h2 className="fw-bold">Task Board</h2>
        <Button variant="primary" onClick={() => setShowModal(true)}>
          + Add Task
        </Button>
      </div>

      <DragDropContext onDragEnd={handleDragEnd}>
        <div className="row">
          {Object.entries(columns).map(([status, title]) => (
            <div className="col-md-3" key={status}>
              <Droppable droppableId={status}>
                {(provided) => (
                  <div
                    className="bg-light p-3 rounded border"
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                  >
                    <h5 className="mb-3">{title}</h5>
                    {tasks
                      .filter((t) => t.status === status)
                      .map((task, index) => (
                        <Draggable
                          key={task.id}
                          draggableId={task.id.toString()}
                          index={index}
                        >
                          {(provided) => (
                            <Card
                              className="mb-3 shadow-sm"
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                            >
                              <Card.Body>
                                <div className="d-flex justify-content-between align-items-start">
                                  <Card.Title className="h6 mb-1">
                                    {task.title}
                                  </Card.Title>
                                  {task.priority && (
                                    <Badge
                                      bg={
                                        task.priority === "high"
                                          ? "danger"
                                          : task.priority === "medium"
                                          ? "warning"
                                          : "success"
                                      }
                                    >
                                      {task.priority}
                                    </Badge>
                                  )}
                                </div>
                                {task.description && (
                                  <Card.Text className="text-muted small">
                                    {task.description}
                                  </Card.Text>
                                )}
                                <div className="d-flex justify-content-between small text-muted">
                                  {task.assignee && <span>üë§ {task.assignee}</span>}
                                  {task.due_date && <span>üìÖ {task.due_date}</span>}
                                </div>
                                <div className="small text-muted mt-1">
                                  ‚úçÔ∏è Created by:{" "}
                                  <strong>
                                    {task.created_by || "Unknown"}
                                  </strong>
                                </div>
                              </Card.Body>
                            </Card>
                          )}
                        </Draggable>
                      ))}
                    {provided.placeholder}
                  </div>
                )}
              </Droppable>
            </div>
          ))}
        </div>
      </DragDropContext>

      {/* Create Task Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>Create Task</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Title</Form.Label>
              <Form.Control
                type="text"
                value={newTask.title}
                onChange={(e) =>
                  setNewTask((prev) => ({ ...prev, title: e.target.value }))
                }
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Description</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={newTask.description}
                onChange={(e) =>
                  setNewTask((prev) => ({
                    ...prev,
                    description: e.target.value,
                  }))
                }
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Assignee</Form.Label>
              <Form.Select
                value={newTask.assignee}
                onChange={(e) =>
                  setNewTask((prev) => ({
                    ...prev,
                    assignee: e.target.value,
                  }))
                }
              >
                <option value="">-- Select Assignee --</option>
                <option value="Everyone">Everyone</option>
                {users.map((u) => (
                  <option key={u.id} value={u.full_name}>
                    {u.full_name}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Due Date</Form.Label>
              <Form.Control
                type="date"
                value={newTask.due_date}
                onChange={(e) =>
                  setNewTask((prev) => ({
                    ...prev,
                    due_date: e.target.value,
                  }))
                }
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Priority</Form.Label>
              <Form.Select
                value={newTask.priority}
                onChange={(e) =>
                  setNewTask((prev) => ({
                    ...prev,
                    priority: e.target.value as Task["priority"],
                  }))
                }
              >
                <option value="low">Low</option>
                <option value="medium">Medium</option>
                <option value="high">High</option>
              </Form.Select>
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Status</Form.Label>
              <Form.Select
                value={newTask.status}
                onChange={(e) =>
                  setNewTask((prev) => ({
                    ...prev,
                    status: e.target.value as Task["status"],
                  }))
                }
              >
                <option value="todo">To Do</option>
                <option value="in_progress">In Progress</option>
                <option value="on_hold">On Hold</option>
                <option value="done">Completed</option>
              </Form.Select>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            Cancel
          </Button>
          <Button variant="primary" onClick={handleCreateTask}>
            Create Task
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}
